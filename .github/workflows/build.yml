# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  # set this to true in GitHub variables to enable building the container
  # HAS_CONTAINER: true
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # just a name, but storing it separately as we're nice people
  DOCKER_IMAGE_ARTIFACT_NAME: Docker image
  DOCKER_IMAGE_OUTPUT_LOCATION: /tmp
  DOCKER_IMAGE_TAR_LOCATION: /tmp/docker-image.tar # notice /tmp same as DOCKER_IMAGE_OUTPUT_LOCATION
  RUSTFLAGS: --deny=warnings

concurrency:
  # each new commit to a PR runs this workflow
  # so we need to avoid a long running older one from overwriting the "pr-<number>-latest"
  group: "${{ github.workflow }} @ ${{ github.ref_name }}"
  cancel-in-progress: true

jobs:
  build-rust:
    needs:
      - changes
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.rust) == true
    uses: ./.github/workflows/build-rust.yml

  build-typescript:
    needs:
      - changes
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.changes.outputs.typescript) == true
    uses: ./.github/workflows/build-typescript.yml

  repo-has-container:
    name: Repo has container?
    runs-on: ubuntu-latest
    outputs:
      has_container: ${{ steps.determine.outputs.has_container }}

    steps:
      - name: Repo has docker container?
        id: determine
        shell: bash
        run: |
          HAS_CONTAINER="${{ vars.HAS_CONTAINER }}"
          echo "has_container=${HAS_CONTAINER:-false}" >> ${GITHUB_OUTPUT}

  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      typescript: ${{ steps.filter.outputs.typescript }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          show-progress: false
          submodules: true

      - name: Check if we actually made changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/file-filters.yml

  calculate-version:
    name: Calculate version
    runs-on: ubuntu-latest
    needs:
      - changes
      - repo-has-container
    outputs:
      version: ${{ steps.version.outputs.next_version }}
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.repo-has-container.outputs.has_container) == true &&
      (
        fromJSON(needs.changes.outputs.rust) == true ||
        fromJSON(needs.changes.outputs.typescript) == true
      )
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          show-progress: false
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 # v4.0.1
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cocogitto
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Set up mold
        uses: rui314/setup-mold@c9803d2102b7e020ad0ccd687c55b2ad8baf3496 # v1

      - name: Set up toolchain
        shell: bash
        run: |
          rm ${HOME}/.cargo/bin/rustfmt
          rm ${HOME}/.cargo/bin/cargo-fmt
          rustup update

          cargo --version

      - name: Get binstall
        shell: bash
        run: |
          cd /tmp
          archive="cargo-binstall-x86_64-unknown-linux-musl.tgz"
          wget "https://github.com/cargo-bins/cargo-binstall/releases/latest/download/${archive}"

          tar -xvf "./${archive}"

          rm "./${archive}"

          mv ./cargo-binstall ~/.cargo/bin/

      - name: Install cocogitto to get the next version number
        shell: bash
        run: |
          cargo binstall --no-confirm cocogitto --target x86_64-unknown-linux-musl --pkg-url "{ repo }/releases/download/{ version }/{ name }-{ version }-{ target }.tar.gz" --bin-dir "{ bin }" --pkg-fmt tgz

      - name: Calculate next version
        id: version
        shell: bash
        run: |
          VERSION="$(cog bump --auto --dry-run || true)"

          if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "New version: ${VERSION}"
          else
              VERSION="$(git tag --points-at "$(git rev-list --tags --max-count=1)" | sort --reverse | head --lines 1)"

              echo "No version generated, defaulting to latest git tag: ${VERSION}"
          fi

          # remove v
          VERSION="${VERSION//v/}"

          # store
          echo "next_version=${VERSION}" >> ${GITHUB_OUTPUT}

  docker-build:
    name: Build Docker container
    runs-on: ubuntu-latest
    needs:
      - build-rust
      - build-typescript
      - calculate-version
      - repo-has-container
      - changes
    if: |
      github.event_name == 'pull_request' &&
      fromJSON(needs.repo-has-container.outputs.has_container) == true &&
      (!(
        contains(needs.*.result, 'failure') ||
        contains(needs.*.result, 'cancelled')
      )) &&
      (
        fromJSON(needs.changes.outputs.rust) == true ||
        fromJSON(needs.changes.outputs.typescript) == true
      )
    env:
      APPLICATION_NAME: PLACEHOLDER # overridden in step 'Set application name', this is merely to satisfy the linter
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          show-progress: false

      - name: Set the Cargo.toml version before we copy in the data into the Docker container
        shell: bash
        run: |
          ./.github/scripts/update-version.sh ${{ needs.calculate-version.outputs.version }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@0d103c3126aa41d772a8362f6aa67afac040f80c # v3.1.0

      # TODO validate no changes between github.event.pull_request.head.sha and the actual current sha (representing the hypothetical merge)

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr,suffix=-latest
            type=raw,value=pr-${{ github.event.pull_request.base.sha }}-${{ github.event.pull_request.head.sha }}
          labels: |
            org.opencontainers.image.version=pr-${{ github.event.number }}
            org.opencontainers.image.source=${{ github.event.pull_request.html_url }}

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase the image name
        shell: bash
        run: |
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}

      - name: Set application name
        shell: bash
        run: |
          APPLICATION_NAME=${{ github.repository }}
          echo "APPLICATION_NAME=${APPLICATION_NAME##*/}" >> ${GITHUB_ENV}

      - name: Build Docker image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          build-args: |
            APPLICATION_NAME=${{ env.APPLICATION_NAME }}
          context: .
          # this container is THE PR's artifact, and we will re-tag it
          # once the PR has been accepted
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          outputs: type=docker,dest=${{ env.DOCKER_IMAGE_TAR_LOCATION }}

      - name: Upload artifact
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: ${{ env.DOCKER_IMAGE_ARTIFACT_NAME }}
          path: ${{ env.DOCKER_IMAGE_TAR_LOCATION }}

  docker-publish:
    name: Publish Docker container
    runs-on: ubuntu-latest
    needs:
      - docker-build
    # Check if the event is not triggered by a fork
    if: github.event.pull_request.head.repo.full_name == github.repository && github.event_name == 'pull_request'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@0d103c3126aa41d772a8362f6aa67afac040f80c # v3.1.0

      - name: Download artifact
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: ${{ env.DOCKER_IMAGE_ARTIFACT_NAME }}
          path: ${{ env.DOCKER_IMAGE_OUTPUT_LOCATION }}

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load image from artifact
        shell: bash
        run: |
          docker load --input ${{ env.DOCKER_IMAGE_TAR_LOCATION }}

      - name: Push image with all tags
        shell: bash
        run: |
          docker push ${REGISTRY,,}/${IMAGE_NAME,,} --all-tags

  all-done:
    name: All done
    # this is the job that should be marked as required on GitHub. It's the only one that'll reliably trigger
    # when any upstream fails: success
    # when all upstream skips: pass
    # when all upstream success: success
    # combination of upstream skip and success: success
    runs-on: ubuntu-latest
    needs:
      - build-rust
      - build-typescript
      - docker-build
      - docker-publish
    if: always()
    steps:
      - name: Fail!
        shell: bash
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "One / more upstream failed or was cancelled. Failing job..."

          exit 1

      - name: Success!
        shell: bash
        run: |
          echo "Great success!"
